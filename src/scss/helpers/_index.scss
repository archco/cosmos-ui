@import 'display';
@import 'text';
@import 'flex';
@import 'sizing';
@import 'spacing';

// toggling content
.display-hide { display: none !important; }
.display-show { display: block !important; }
.display-invisible { visibility: hidden !important; }

// responsive hiding
%responsive-tablet-hide {
  @include media-tablet-up() { display: none !important; }
}

%responsive-mobile-hide {
  @include media-only-mobile() { display: none !important; }
}

.hide-only-mobile {
  @extend %responsive-mobile-hide;
}

.hide-tablet-up {
  @extend %responsive-tablet-hide;
}

// responsive wrapper. overflow-x auto.
.responsive-wrapper {
  max-width: 100%;
  overflow-x: auto;

  table {
    width: auto;
    max-width: none;
  }
}

// centering
%position-center-container { @include position-center-container; }
%position-center { @include position-center; }

// @deprecated. use `helpers/flex` instead.
.vertical-center-container,
.flex-container-vertical-center {
  @include flex-container-align('flex-start', 'center');
  display: flex;
}

// @deprecated. use `helpers/flex` instead.
.flex-center-container,
.flex-container-center {
  @include flex-container-align('center', 'center');
  display: flex;
}

.center-position-container,
.position-center-container {
  @include position-center-container;

  .center-position,
  .position-center {
    @include position-center;
  }
}

// @deprecated. use `helpers/spacing` instead.
.center-block {
  display: block;
  margin-right: auto;
  margin-left: auto;
}

// float
.float-clear { @include clear-both; }
.float-left { float: left !important; }
.float-right { float: right !important; }

// position
.fixed-top {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: $z-index-fixed;
}

.sticky-top {
  position: sticky;
  top: 0;
  z-index: $z-index-sticky;
}

// color-set helper
@each $name, $color in $color-set {
  .color-#{$name} {
    color: $color;
  }

  .bg-color-#{$name} {
    color: get-contrast($color);
    background-color: $color;
  }
}

// shadow
.shadow { box-shadow: $shadow-normal; }
.shadow-near { box-shadow: $shadow-near; }
.shadow-far { box-shadow: $shadow-far; }
.shadow-inset { box-shadow: $shadow-inset-normal; }
.shadow-inset-near { box-shadow: $shadow-inset-near; }
.shadow-inset-far { box-shadow: $shadow-inset-far; }

// rounded
@each $key, $val in (small: $radius-small, normal: $radius-normal, large: $radius-large) {
  $_suffix: if($key == normal, '', '-' + $key);

  .rounded#{$_suffix} {
    border-radius: $val !important;
  }
  .rounded-top#{$_suffix} {
    border-top-left-radius: $val !important;
    border-top-right-radius: $val !important;
  }
  .rounded-right#{$_suffix} {
    border-top-right-radius: $val !important;
    border-bottom-right-radius: $val !important;
  }
  .rounded-bottom#{$_suffix} {
    border-bottom-left-radius: $val !important;
    border-bottom-right-radius: $val !important;
  }
  .rounded-left#{$_suffix} {
    border-top-left-radius: $val !important;
    border-bottom-left-radius: $val !important;
  }
}

// misc
.box-line { border: 1px solid $secondary-color; }
.group { margin-bottom: 1rem; }
.debug-line { @include debug; }
.caret { @include caret('down'); }
.arrow { @include arrow; }

.no-margin { padding: 0; margin: 0;} // @deprecated. use `helper/spacing` instead.
.full-width { width: 100%; } // @deprecated. use `helper/sizing` instead.
.full-height { height: 100%; } // @deprecated. use `helper/sizing` instead.
